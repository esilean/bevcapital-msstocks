AWSTemplateFormatVersion: 2010-09-09
Description: Deploy a service into an ECS cluster behind a network load balancer and nginx
Parameters:
  EnvironmentName:
    Type: String
    Default: development
    Description: The name of the environment to add this service to

  VPC:
    Type: AWS::EC2::VPC::Id
    Description: The VPC that the ECS cluster is deployed to

  Cluster:
    Type: String
    Default: development
    Description: Please provide the ECS Cluster ID that this service should run on

  ServiceName:
    Type: String
    Default: ms-stocks
    Description: A name for the service

  ServiceImageUrl:
    Type: String
    Description: The url of a docker image that contains the application

  NetworkLoadBalancerARN:
    Type: String
    Description: A Network Load balancer ARN

  ListenerPort:
    Type: Number
    Default: 8081
    Description: Listener Port

  NginxImageUrl:
    Type: String
    Description: The url of a docker image that contains the nginx

  XRayImageUrl:
    Type: String
    Description: The url of a docker image that contains the xray-daemon

  ECSServiceAutoScalingRoleARN:
    Type: String
    Description: The ECS service auto scaling role ARN

  XRayContainerPort:
    Type: Number
    Default: 2000
    Description: What port number the xray-daemon application inside the docker container is binding to

  DesiredCount:
    Type: Number
    Default: 1
    Description: How many copies of the service task to run

  Role:
    Type: String
    Default: ""
    Description:
      (Optional) An IAM role to give the service's containers if the code within needs to
      access other AWS resources like S3 buckets, DynamoDB tables, etc

Conditions:
  HasCustomRole: !Not [!Equals [!Ref "Role", ""]]

Resources:
  # A log group for storing the stdout logs from this service's containers
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${EnvironmentName}-service-${ServiceName}

  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref "ServiceName"
      NetworkMode: bridge
      Cpu: 512
      Memory: 512
      TaskRoleArn:
        Fn::If:
          - "HasCustomRole"
          - !Ref "Role"
          - !Ref "AWS::NoValue"
      ContainerDefinitions:
        - Name: !Sub ${ServiceName}-nginx
          Cpu: 128
          Memory: 128
          Essential: true
          Image: !Ref "NginxImageUrl"
          PortMappings:
            - ContainerPort: 80
              HostPort: 0
              Protocol: TCP
          Links:
            - !Ref "ServiceName"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Sub ${EnvironmentName}-service-${ServiceName}
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: !Sub ${EnvironmentName}-${ServiceName}-nginx
        - Name: !Ref "ServiceName"
          Cpu: 128
          Memory: 128
          Image: !Ref "ServiceImageUrl"
          PortMappings:
            - ContainerPort: 80
              HostPort: 0
          Links:
            - xray-daemon
          Environment:
            - name: AWS_XRAY_DAEMON_ADDRESS
              value: !Sub xray-daemon:${XRayContainerPort}
            - name: RDS_ENDPOINT
              value: !ImportValue
                "Fn::Sub": "DBInstance-Endpoint"
            - name: RDS_PASSWORD
              value:
                !Join [
                  "",
                  [
                    "{{resolve:secretsmanager:",
                    "RDSSecretBevCapital",
                    ":SecretString:password}}",
                  ],
                ]
            - name: CACHE_ENDPOINT
              value:
                !Join [
                  "",
                  [
                    "{{resolve:secretsmanager:",
                    "CacheSecretBevCapital",
                    ":SecretString:cacheEndpoint}}",
                  ],
                ]
            - name: CACHE_PASSWORD
              value:
                !Join [
                  "",
                  [
                    "{{resolve:secretsmanager:",
                    "CacheSecretBevCapital",
                    ":SecretString:cachePassword}}",
                  ],
                ]
            - name: SQSSettings__QueueURL
              value: !ImportValue
                "Fn::Sub": "AppQueueURL"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Sub ${EnvironmentName}-service-${ServiceName}
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: !Sub ${EnvironmentName}-${ServiceName}
        - Name: xray-daemon
          Cpu: 128
          Memory: 128
          Essential: false
          Image: !Ref "XRayImageUrl"
          PortMappings:
            - ContainerPort: !Ref XRayContainerPort
              HostPort: 0
              Protocol: udp
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Sub ${EnvironmentName}-service-${ServiceName}
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: !Sub ${EnvironmentName}-${ServiceName}-xray

  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Ref ServiceName
      Cluster: !Ref Cluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref "DesiredCount"
      TaskDefinition: !Ref "TaskDefinition"
      LoadBalancers:
        - ContainerName: !Sub ${ServiceName}-nginx
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ServiceName}-nginx
      VpcId: !Ref "VPC"
      Port: !Ref ListenerPort
      Protocol: TCP
      TargetType: instance
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: "/ms-stocks/health/live"
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 15
        - Key: deregistration_delay.connection_termination.enabled
          Value: true

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref NetworkLoadBalancerARN
      Port: !Ref ListenerPort
      Protocol: TCP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  # Enable autoscaling for this service
  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: Service
    Properties:
      ServiceNamespace: "ecs"
      ScalableDimension: "ecs:service:DesiredCount"
      ResourceId:
        Fn::Join:
          - "/"
          - - service
            - !Ref "Cluster"
            - !Ref "ServiceName"
      MinCapacity: 1
      MaxCapacity: 5
      RoleARN: !Ref "ECSServiceAutoScalingRoleARN"

  # Create scaling policies for the service
  ScaleDownPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: ScalableTarget
    Properties:
      PolicyName:
        Fn::Join:
          - "/"
          - - scale
            - !Ref "EnvironmentName"
            - !Ref "ServiceName"
            - down
      PolicyType: StepScaling
      ResourceId:
        Fn::Join:
          - "/"
          - - service
            - !Ref "Cluster"
            - !Ref "ServiceName"
      ScalableDimension: "ecs:service:DesiredCount"
      ServiceNamespace: "ecs"
      StepScalingPolicyConfiguration:
        AdjustmentType: "ChangeInCapacity"
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: -1
        MetricAggregationType: "Average"
        Cooldown: 60

  ScaleUpPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: ScalableTarget
    Properties:
      PolicyName:
        Fn::Join:
          - "/"
          - - scale
            - !Ref "EnvironmentName"
            - !Ref "ServiceName"
            - up
      PolicyType: StepScaling
      ResourceId:
        Fn::Join:
          - "/"
          - - service
            - !Ref "Cluster"
            - !Ref "ServiceName"
      ScalableDimension: "ecs:service:DesiredCount"
      ServiceNamespace: "ecs"
      StepScalingPolicyConfiguration:
        AdjustmentType: "ChangeInCapacity"
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            MetricIntervalUpperBound: 15
            ScalingAdjustment: 1
          - MetricIntervalLowerBound: 15
            MetricIntervalUpperBound: 25
            ScalingAdjustment: 2
          - MetricIntervalLowerBound: 25
            ScalingAdjustment: 3
        MetricAggregationType: "Average"
        Cooldown: 60

  # Create alarms to trigger these policies
  LowCpuUsageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName:
        Fn::Join:
          - "-"
          - - low-cpu
            - !Ref "EnvironmentName"
            - !Ref "ServiceName"
      AlarmDescription:
        Fn::Join:
          - " "
          - - "Low CPU utilization for service"
            - !Ref "ServiceName"
            - "in environment"
            - !Ref "EnvironmentName"
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Dimensions:
        - Name: ServiceName
          Value: !Ref "ServiceName"
        - Name: ClusterName
          Value: !Ref "Cluster"
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 20
      ComparisonOperator: LessThanOrEqualToThreshold
      AlarmActions:
        - !Ref ScaleDownPolicy

  HighCpuUsageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName:
        Fn::Join:
          - "-"
          - - high-cpu
            - !Ref "EnvironmentName"
            - !Ref "ServiceName"
      AlarmDescription:
        Fn::Join:
          - " "
          - - "High CPU utilization for service"
            - !Ref "ServiceName"
            - "in environment"
            - !Ref "EnvironmentName"
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Dimensions:
        - Name: ServiceName
          Value: !Ref "ServiceName"
        - Name: ClusterName
          Value: !Ref "Cluster"
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 70
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref ScaleUpPolicy
