AWSTemplateFormatVersion: "2010-09-09"
Description: Deploy a service into an ECS cluster behind a load balancer and nginx.
Parameters:
  EnvironmentName:
    Type: String
    Default: development
    Description: The name of the environment to add this service to

  VPC:
    Type: AWS::EC2::VPC::Id
    Description: The VPC that the ECS cluster is deployed to

  Cluster:
    Type: String
    Default: development
    Description: Please provide the ECS Cluster ID that this service should run on

  ServiceName:
    Type: String
    Default: ms-stocks
    Description: A name for the service

  ServiceImageUrl:
    Type: String
    Default: ""
    Description: The url of a docker image that contains the application

  ALB:
    Type: String
    Default: ""
    Description: A Load balancer

  HttpListener:
    Type: String
    Default: ""
    Description: A Listener of the Load balancer

  NginxImageUrl:
    Type: String
    Default: ""
    Description: The url of a docker image that contains the nginx

  XRayImageUrl:
    Type: String
    Default: ""
    Description: The url of a docker image that contains the xray-daemon

  ECSServiceAutoScalingRoleARN:
    Type: String
    Default: ""
    Description: The ECS service auto scaling role ARN

  ServiceContainerPort:
    Type: Number
    Default: 5002
    Description: What port number the application inside the docker container is binding to

  NginxContainerPort:
    Type: Number
    Default: 80
    Description: What port number the nginx application inside the docker container is binding to

  XRayContainerPort:
    Type: Number
    Default: 2000
    Description: What port number the xray-daemon application inside the docker container is binding to

  Path:
    Type: String
    Default: "/ms-stocks"
    Description: A path on the load balancer that this service
      should be connected to.

  Priority:
    Type: Number
    Default: 3
    Description: The priority for the routing rule added to the load balancer.
      This only applies if your have multiple services which have been
      assigned to different paths on the load balancer.

  DesiredCount:
    Type: Number
    Default: 1
    Description: How many copies of the service task to run

  Role:
    Type: String
    Default: ""
    Description:
      (Optional) An IAM role to give the service's containers if the code within needs to
      access other AWS resources like S3 buckets, DynamoDB tables, etc

Conditions:
  HasCustomRole: !Not [!Equals [!Ref "Role", ""]]

Resources:
  # A log group for storing the stdout logs from this service's containers
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${EnvironmentName}-service-${ServiceName}

  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref "ServiceName"
      NetworkMode: bridge
      Cpu: 512
      Memory: 512
      TaskRoleArn:
        Fn::If:
          - "HasCustomRole"
          - !Ref "Role"
          - !Ref "AWS::NoValue"
      ContainerDefinitions:
        - Name: !Sub ${ServiceName}-nginx
          Cpu: 128
          Memory: 128
          Essential: true
          Image: !Ref "NginxImageUrl"
          PortMappings:
            - ContainerPort: 80
              HostPort: !Ref NginxContainerPort
              Protocol: TCP
          Links:
            - !Ref "ServiceName"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Sub ${EnvironmentName}-service-${ServiceName}
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: !Sub ${EnvironmentName}-${ServiceName}-nginx
        - Name: !Ref "ServiceName"
          Cpu: 128
          Memory: 128
          Image: !Ref "ServiceImageUrl"
          PortMappings:
            - ContainerPort: 80
              HostPort: !Ref ServiceContainerPort
          Links:
            - xray-daemon
          Environment:
            - name: AWS_XRAY_DAEMON_ADDRESS
              value: !Sub xray-daemon:${XRayContainerPort}
            - name: RDS_ENDPOINT
              value: ""
            - name: RDS_PASSWORD
              value: ""
            - name: CACHE_ENDPOINT
              value: ""
            - name: CACHE_PASSWORD
              value: ""
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Sub ${EnvironmentName}-service-${ServiceName}
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: !Sub ${EnvironmentName}-${ServiceName}
        - Name: xray-daemon
          Cpu: 128
          Memory: 128
          Essential: false
          Image: !Ref "XRayImageUrl"
          PortMappings:
            - ContainerPort: !Ref XRayContainerPort
              HostPort: !Ref XRayContainerPort
              Protocol: udp
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-group: !Sub ${EnvironmentName}-service-${ServiceName}
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: !Sub ${EnvironmentName}-${ServiceName}-xray

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    DependsOn: ListenerRule
    Properties:
      ServiceName: !Ref ServiceName
      Cluster: !Ref Cluster
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref "DesiredCount"
      TaskDefinition: !Ref "TaskDefinition"
      LoadBalancers:
        - ContainerName: !Sub ${ServiceName}-nginx
          ContainerPort: !Ref NginxContainerPort
          TargetGroupArn: !Ref TargetGroup

  # A target group. This is used for keeping track of all the tasks, and
  # what IP addresses / port numbers they have. You can query it yourself,
  # to use the addresses yourself, but most often this target group is just
  # connected to an application load balancer, or network load balancer, so
  # it can automatically distribute traffic across all the targets.
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${ServiceName}-nginx
      Port: !Ref NginxContainerPort
      Protocol: HTTP
      VpcId: !Ref "VPC"
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /ms-stocks/health/live
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

  # Create a rule on the load balancer for routing traffic to the target group
  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: "forward"
      Conditions:
        - Field: path-pattern
          Values:
            - !Ref Path
            - !Sub ${Path}/*
      ListenerArn: !Ref HttpListener
      Priority: !Ref Priority

  # Enable autoscaling for this service
  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: Service
    Properties:
      ServiceNamespace: "ecs"
      ScalableDimension: "ecs:service:DesiredCount"
      ResourceId:
        Fn::Join:
          - "/"
          - - service
            - !Ref "Cluster"
            - !Ref "ServiceName"
      MinCapacity: 1
      MaxCapacity: 5
      RoleARN: !Ref "ECSServiceAutoScalingRoleARN"

  # Create scaling policies for the service
  ScaleDownPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: ScalableTarget
    Properties:
      PolicyName:
        Fn::Join:
          - "/"
          - - scale
            - !Ref "EnvironmentName"
            - !Ref "ServiceName"
            - down
      PolicyType: StepScaling
      ResourceId:
        Fn::Join:
          - "/"
          - - service
            - !Ref "Cluster"
            - !Ref "ServiceName"
      ScalableDimension: "ecs:service:DesiredCount"
      ServiceNamespace: "ecs"
      StepScalingPolicyConfiguration:
        AdjustmentType: "ChangeInCapacity"
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: -1
        MetricAggregationType: "Average"
        Cooldown: 60

  ScaleUpPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: ScalableTarget
    Properties:
      PolicyName:
        Fn::Join:
          - "/"
          - - scale
            - !Ref "EnvironmentName"
            - !Ref "ServiceName"
            - up
      PolicyType: StepScaling
      ResourceId:
        Fn::Join:
          - "/"
          - - service
            - !Ref "Cluster"
            - !Ref "ServiceName"
      ScalableDimension: "ecs:service:DesiredCount"
      ServiceNamespace: "ecs"
      StepScalingPolicyConfiguration:
        AdjustmentType: "ChangeInCapacity"
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            MetricIntervalUpperBound: 15
            ScalingAdjustment: 1
          - MetricIntervalLowerBound: 15
            MetricIntervalUpperBound: 25
            ScalingAdjustment: 2
          - MetricIntervalLowerBound: 25
            ScalingAdjustment: 3
        MetricAggregationType: "Average"
        Cooldown: 60

  # Create alarms to trigger these policies
  LowCpuUsageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName:
        Fn::Join:
          - "-"
          - - low-cpu
            - !Ref "EnvironmentName"
            - !Ref "ServiceName"
      AlarmDescription:
        Fn::Join:
          - " "
          - - "Low CPU utilization for service"
            - !Ref "ServiceName"
            - "in environment"
            - !Ref "EnvironmentName"
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Dimensions:
        - Name: ServiceName
          Value: !Ref "ServiceName"
        - Name: ClusterName
          Value: !Ref "Cluster"
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 20
      ComparisonOperator: LessThanOrEqualToThreshold
      AlarmActions:
        - !Ref ScaleDownPolicy

  HighCpuUsageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName:
        Fn::Join:
          - "-"
          - - high-cpu
            - !Ref "EnvironmentName"
            - !Ref "ServiceName"
      AlarmDescription:
        Fn::Join:
          - " "
          - - "High CPU utilization for service"
            - !Ref "ServiceName"
            - "in environment"
            - !Ref "EnvironmentName"
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Dimensions:
        - Name: ServiceName
          Value: !Ref "ServiceName"
        - Name: ClusterName
          Value: !Ref "Cluster"
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 70
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref ScaleUpPolicy
